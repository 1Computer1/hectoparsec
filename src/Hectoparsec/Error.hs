{-# LANGUAGE StandaloneDeriving   #-}
{-# LANGUAGE UndecidableInstances #-}

{-|
Module      : Hectoparsec.Error
Copyright   : (c) comp 2020
License     : MIT
Maintainer  : onecomputer00@gmail.com
Stability   : stable
Portability : portable

Data types for errors reported during parsing.

Hectoparsec itself does not come with error pretty printing, but errors can be formatted while prototyping with the
functions from "Hectoparsec.Debug". External libraries or your own error pretty printer can be used instead.
-}
module Hectoparsec.Error
    ( -- * Parse error data
      Unexpected(..)
    , Message(..)
    , ErrorItem(..)
    , ParseError(..)
    ) where

import Hectoparsec.Pos
import Hectoparsec.Stream

-- | An unexpected item from the input stream.
data Unexpected s
    = UnexpectedToken (Token s) -- ^ An unexpected token.
    | UnexpectedChunk (Chunk s) -- ^ An unexpected chunk.
    | UnexpectedEnd             -- ^ An unexpected end of input.
    | UnexpectedEmpty           -- ^ An unexpected empty parser.

{-|
Chooses between two unexpected items. 'UnexpectedEmpty' items are discarded in favor of more descriptive items. When
choosing between other items, the second item is chosen.
-}
instance Semigroup (Unexpected s) where
    UnexpectedEmpty <> a               = a
    a               <> UnexpectedEmpty = a
    _               <> a               = a
    {-# INLINE (<>) #-}

instance Monoid (Unexpected s) where
    mempty = UnexpectedEmpty

deriving instance (Show (Token s), Show (Chunk s)) => Show (Unexpected s)
deriving instance (Eq (Token s), Eq (Chunk s)) => Eq (Unexpected s)

-- | An error message from the input stream.
data Message e
    = MessageCustom e    -- ^ A custom error message.
    | MessageFail String -- ^ A string error message.
    deriving (Show, Eq)

-- | A possible error during parsing for a stream @s@, with error type @e@ and label type @l@.
data ErrorItem s e l
      {-|
      An error generated through matching tokens. There is an unexpected item and a list of labels from parsers that
      make up the expected items. There may be duplicates in the list of expected labels, so it is up to you to
      deduplicate it if needed.
      -}
    = ErrorItemLabels (Unexpected s) [l]
      {-|
      An error generated by 'fail' and 'Hectoparsec.Class.failure', and by custom errors, which can generally happen
      anywhere. These errors are preferred over the errors generated by matching tokens.
      -}
    | ErrorItemMessages [Message e]

{-|
Merges two error items. We prefer 'ErrorItemMessages' over 'ErrorItemLabels'. When two error items of the same variant
are given, the two error items are merged together.
-}
instance Semigroup (ErrorItem s e l) where
    ErrorItemMessages xs    <> ErrorItemMessages ys    = ErrorItemMessages (xs <> ys)
    ErrorItemLabels xu xd   <> ErrorItemLabels yu yd   = ErrorItemLabels (xu <> yu) (xd <> yd)
    _                       <> e@(ErrorItemMessages _) = e
    e@(ErrorItemMessages _) <> _                       = e
    {-# INLINE (<>) #-}

deriving instance (Show (Token s), Show (Chunk s), Show e, Show l) => Show (ErrorItem s e l)
deriving instance (Eq (Token s), Eq (Chunk s), Eq e, Eq l) => Eq (ErrorItem s e l)

-- | A container for an error during parsing for a stream @s@, with error type @e@ and label type @l@.
data ParseError s e l = ParseError
    { parseErrorPos    :: !Pos                -- ^ The position of the error in the source.
    , parseErrorOffset :: {-# UNPACK #-} !Int -- ^ The offset of the error in the stream.
    , parseErrorItem   :: ErrorItem s e l     -- ^ The error item.
    }

deriving instance (Show (Token s), Show (Chunk s), Show e, Show l) => Show (ParseError s e l)
deriving instance (Eq (Token s), Eq (Chunk s), Eq e, Eq l) => Eq (ParseError s e l)

{-|
Merges two errors together. Errors that occur later in the stream are preferred. When they occur at the same place,
the error items are merged, with preference for the second parse error.
-}
instance Semigroup (ParseError s e l) where
    x <> y = case compare (parseErrorOffset x) (parseErrorOffset y) of
        LT -> y
        EQ -> y { parseErrorItem = parseErrorItem x <> parseErrorItem y }
        GT -> x
    {-# INLINE (<>) #-}
